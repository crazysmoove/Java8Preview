Java 8 Preview, Part 1
===============================================================================

Outline:

    1. interfaces: static methods, default methods, @FunctionalInterface
        static methods
            must be implemented, cannot be empty
            not inherited
            "Often, an interface is the most appropriate place to
                declare methods that produce or manipulate objects of the interface
                type"
            in place of Collections.emptyList(), e.g. -- static methods for working with
                Collection instances, could be on interface instead
            java.util.Comparator.naturalOrder() and java.util.Stream.empty()
        *** default methods
            adds new methods to existing interfaces w/o breaking code ("defender methods")
            "...provides a default implementation for any class that implements the
                interface without overriding the method."
            "...provides a mechanism for multiple inheritance of behavior"
            can NOT override methods in Object (toString(), equals(), hashCode())
                because that makes it "...difficult to reason about when a default
                method is invoked."
            lots of default methods added to collections classes for lambda stuff
            java.lang.Iterable.forEach() (show example)
            show Person example
        *** @FunctionalInterface
            defines exactly 1 abstract method (SAM="single abstract method")
            declares intention, enforced by compiler, like @Override
            examples: Runnable.run(), Comparable.compareTo(), Closeable.close()
            show Runnable code
    2. generic type inference improvements
        example code
    3. annotation updates
        JEP 104: more annotatable locations (usage, not just declaration)
            enables annotation-based checkers for null, security errors,
                valid regexes, property file keys, signature strings, immutable data
                (possible now, but kludgy)
            make more errors detectable at compile-time instead of run-time
            examples from tutorial
        JEP 120: repeating annotations
            examples from tutorial

    *** 4. java.time
        preferred over java.util.Date
            Date is  mutable
            non-intuitive API
            lots of people already used Joda-Time, which java.time is based on
            JSR-310, similar to Joda-Time but with updates/improvements
        java.time.Instant
            roughly equivalent to old Date, "an instantaneous point on the timeline"
            immutable and threadsafe
            has nanosecond precision (Date has millisecond precision), stores
                "epoch seconds" in a long, nanoseconds in an int
            java.util.Date/Calendar.toInstant() converts from old to new
            java.util.Date.fromInstant() converts from new to old
        uses enums, not integers, for months, days, etc.
        java.time.LocalDateTime - year/month/day/hour/min/sec, no offset or timezone
            LocalDate - year/month/day only
            LocalTime - hour/min/sec only (down to nanosec, but no offset or tz)
        java.time.ZonedDateTime - date/time + tz
            ZoneId - like "America/Chicago", but use ".of" to map to "CST"
            use to convert from Instants to LocalDateTimes
        java.time.OffsetDateTime - date/time + UTC offset (like "-05:00")
            OffsetTime - time component only, no date
            ZoneOffset - like "+02:00"
        java.time.Month - enum (not static int field), 1-12 (not 0-11)
            YearMonth - like "April 1975"
            MonthDay - like "April 15th"
            DayOfWeek - enum, 1-7 (Mon-Sun)
        java.time.Duration
            "time-based amount of time" like "34.5 seconds"
            nanos, millis, seconds, minutes, hours, days
        java.time.Period
            "date-based amount of time" like "5 years, 4 months, 3 days"
            years, months, days
            .plusMonths()
            .minusYears()
        Duration, Period both are TemporalAmounts, with addTo() and subtractFrom()
        java.time.format.DateTimeFormatter
            (show examples)
        java.time.temporal.ChronoUnit
            ChronoUnit.DAYS.between(time1, time2)
            ChronoUnit.MINUTES.addTo(time1, 3)
            ChronoUnit.MONTHS.addTo(time1, -12)
        java.time.temporal.TemporalAdjuster
            date.with(TemporalAdjuster.lastDayOfMonth())
            date.with(TemporalAdjuster.firstDayOfNextMonth())
            date.with(TemporalAdjuster.firstInMonth(DayOfWeek.FRIDAY))
        fluent API
            .plusDays()
            .minusHours()
            DayOfWeek.MONDAY.plus(3)
            *** code from tutorials http://docs.oracle.com/javase/tutorial/datetime/iso/date.html
    *** 5. Misc API updates for java.lang, java.util, etc.
        Objects.isNull()/nonNull()
        Math.*Exact()
        Integer/Long/Double.min()/.max()/.sum()
        Random.ints()/longs()/SecureRandom
        String.join(), StringJoiner
        Base64
        Arrays.*
        Comparator.naturalOrder()/.reverseOrder()/
            .nullsFirst()/Last(), .thenComparing(), .reversed()
        Optional
        Process.*
        ZipFile
        JDBC 4.2: new java.time support, metadata, cleanup
    6. Collections API additions
        Collection.removeIf(predicate)
        List.sort(comparator)
        List.replaceAll(unaryOperator)
        Map.putIfAbsent()
        Map.remove()
        Map.replace() x 2
        Map.getOrDefault()
    7. parallel array sorting, other things (Spliterator, etc.)

    8. IO/NIO API additions
    9. base 64 encoding
    10. jdbc 4.2

    11. nashorn (jjs scripting, etc.)

    12. faster javac
    13. better memory usage
    14. removal of permgen
    15. access to param names at runtime

    Time Permitting

    16. concurrency updates (?)
    17. DocLint and related (?)
    18. Compact profiles (?)
    19. java.util.function.* (?)

-------------------------------------------------------------------------------

Sources:
    1. https://blogs.oracle.com/thejavatutorials/entry/jdk_8_documentation_developer_preview
    2. http://www.techempower.com/blog/2013/03/26/everything-about-java-8/
    3. http://openjdk.java.net/projects/jdk8/features
    4. http://blog.hartveld.com/2013/03/jdk-8-13-interface-default-method.html

Download from https://jdk8.java.net/download.html

Schedule:
    1. 9/5/13 - Developer Preview
    2. 10/10/13 - API Freeze
    3. 1/23/14 - Milestone 9, Final Release Candidate
    4. 3/18/14 - General Availability

Topics: (* = covered in more detail)
    1. Language/Library
        1.1. New API for date/time [1] (JEP 150, details at http://openjdk.java.net/jeps/150)  *
                java.time
                immutable
                based on, but not identical to, JodaTime
                better API
                integrates w/ existing java.util.Date
                accurate to nanoseconds, not milliseconds like java.util.Date
                see also JSR 310
        1.2. Parallel array sorting [1] *
                JEP 103, http://openjdk.java.net/jeps/103
                add util methods to java.util.Arrays to use JSR 166 Fork/Join
                success: >= 1.3 speedup over sequential sort on a 2-core system
                programmer can convert other data structures to/from arrays to use this too
                still synchronous, not async
                new methods: parallelSort(primitive[]), parallelSort(primitive[], int fromIdx, int toIdx)
                    for all primitives except boolean, plus Comparable object types, plus arbitrary Object types
                    using supplied Comparator
                requires working space same size as array to be sorted (whole array)
                might later allow tweaking of Fork/Join behavior, selection of algorithms
        1.3. Annotations updates (repeating, multiple usage sites, see http://types.cs.washington.edu/jsr308/) [1,2] *
                JEP 104, http://openjdk.java.net/jeps/104; also JSR 308
                currently only type declarations can be annotated, this adds type uses also
                usage examples: prevent NPEs, make data immutable, check for non-i18n strings
                also JEP 120, "Repeating Annotations"
        1.4. Base64 encoding/decoding util classes [1] *
                previously in internal APIs like com.sun.* packages, now standardized and moved to java.util
    2. Security [1]
        2.1. Server Name Indication Extension for Server Applications
        2.2. New PKIXRevocationChecker Class
        2.3. SHA-224 Message Digests
        2.4. Stronger Algorithms for Password-Based Encryption
        2.5. Enhanced Support for NSA Suite B Cryptography
    3. Internationalization Enhancements [1]
        3.1. Installation of Custom Resources as Extensions *?
        3.2. New Calendar and Locale APIs *?
    4. Tools Enhancements [1]
        4.1. Pack200 Engine Updates
        4.2. Faster javac (JEP 139 - http://openjdk.java.net/jeps/139) *
                no external API until later
                javac to use all available cores, reuse javac in a server process
                javac to do incremental builds (like ecj?)
                laying the groundwork for better/smarter compiling/re-compiling in future versions
    5. Platform and System Support Enhancements [1]
        5.1. Support for Linux ARM
    6. Removed Features [1]
        6.1. apt Tool
        6.2. JDBC-ODBC bridge
        6.3. ActiveX bridge
        6.4. Old Java Plug-in
        6.5. Removal of PermGen (JEP 122, http://openjdk.java.net/jeps/122) *
                JRockit/Hotspot convergence
                holds class metadata, interned strings, class statics
                moving class metadata to native memory, interned strings and class statics to heap
                class metadata now limited by native memory available, not -XX:MaxPermSize setting
                may require more GCs or adjustments to -Xmx setting
                related JEP 174: reduce class metadata footprint by 25%
    7. Other
        7.1. Configurable Secure Random-Number Generation (JEP 123) *?
        7.2. Integrate JavaFX into JRE/JDK, Launch JavaFX Applications from the command line (JEP 153) *?
                http://openjdk.java.net/jeps/153
        7.3. HTTP URL Permissions (JEP 184) *?
                works w/ URLs, not just IP addresses
        7.4. Handle Frequent HashMap Collisions with Balanced Trees (JEP 180) *?
                improve performance of java.util.HashMap and LinkedHashMap
        7.5. JAXP 1.5: Restrict Fetching of External Resources (JEP 185) *?
                specify protocols that can be used to load external DTDs/schemas/stylesheets
                specify via code, system properties, or config files
        7.6. Concurrency Updates (JEP 155) *?
                scalable updatable variables (better performance than Atomic vars by relaxing guarantees)
                new features in ConcurrentHashMap
                better performance, features in ForkJoinPools
                better support for STM in frameworks, languages built on JVM
                see also JSR 166
        7.7. Access to parameter names at runtime (JEP 118) *
                no more having to redundantly annotate param names like in Spring MVC, et al.
        7.8. Interface updates [2] *
            7.8.1. Static methods in interfaces
            7.8.2. Default methods in interfaces
            7.8.3. @FunctionalInterface annotation
        7.9. Nashorn Javascript engine (JEP 174, details at http://openjdk.java.net/jeps/174) *
                available via javax.script, jrunscript tool
                also via command-line "jjs" tool (shebang scripts, here docs, edit strings)
                ECMAScript 5.1-compliant
                invoke JS from Java, Java from JS
                better perf than Rhino (compiled vs interpreted)
                no DOM/CSS support -- this is JS the language, not JS the browser scripting env
                heavy use of "invokedynamic" from Java 7
                example: https://blogs.oracle.com/nashorn/entry/csi_nashorn_shell_scripting_in
                example: https://blogs.oracle.com/nashorn/entry/http_server_written_in_nashorn
        7.10. DocLint (error-checking in Javadoc) (JEP 172) *
                detect bad syntax (unescaped chars, unmatched parens), bad HTML
                detect bad references (e.g., via @see or @param)
                accessibility issues (missing table caption, e.g.)
                missing info, undocumented params
                also JEP 105, "DocTree API", provides structured access to content of Javadoc comments
                also JEP 106, "Add Javadoc to javax.tools", allows javadoc to be invoked via API, not just command-line
        7.11. Compact Profiles (JEP 161)
                https://blogs.oracle.com/jtc/entry/a_first_look_at_compact
                migrate away from CDC, merge w/ SE
                compact1 = 14MB, compact2 = 18MB, compact3 = 21MB, full = 45MB
                related JEP 162, prepare for modularity in Java9:
                    change classloading in JAXP to use standard java.util.ServiceLoader
                    command-line tool to show static dependencies
                    deprecate APIs that hinder modularity, like *changeListener() methods in logging/JAR tools
        7.12. Generic type inference updates (JEP 101) [2] work-in-progress? *
                method type-parameter inference in method context
                same in chained calls
                sample code at http://openjdk.java.net/jeps/101
        7.13. java.util.function.Function/Predicate/Consumer/Supplier/BinaryOperator (part 2?)
        7.14. Collections API additions [2] *
            7.14.1. Iterable.forEach()/forEachRemaining [2] (part 2?)
            7.14.2. Collection.removeIf(Predicate)
            7.14.3. java.util.Spliterator (parallel iterator) (part 2?)
            7.14.4. List.sort() default method, replaces Collections.sort(list, comparator) w/ more efficient version
            7.14.5. List.replaceAll() (part 2?)
            7.14.6. Map.forEach()/replaceAll() (part 2?)
            7.14.7. Map.putIfAbsent()
            7.14.8. Map.remove(k, v)/replace(k, v1, v2)/replace(k, v)
            7.14.9. Map.computeIfAbsent()/computeIfPresent()/compute() (part 2?)
            7.14.10. Map.merge() (part 2?)
            7.14.11. Map.getOrDefault()
            7.14.12. Collections.emptySortedSet()
        7.15. Concurrency API additions [2] *
            7.15.1. ConcurrentHashMap.reduce*()/.search*()/forEach() *
            7.15.2. Others
        7.16. IO/NIO API additions [2]
            7.16.1. Files.list()/.walk()/.find()/.lines(), etc. *?
        7.17. Misc updates
            7.17.1. String.join()
            7.17.3. SplittableRandom
            7.17.4. Optional
            7.17.5. StringJoiner
            7.17.6. Comparator.naturalOrder()/.reverseOrder()
            7.17.7. Comparator.thenComparing()
            7.17.8. Arrays.*
            7.17.9. Math.*Exact()
            7.17.10. Integer/Long/Double.min()/.max()/.sum
            7.17.11. Objects.isNull()/nonNull()
            7.17.12. Random.ints()/longs()
            7.17.13. Predicate.asPredicate()
            7.17.14. ZipFile
            7.17.15. JDBC 4.2
                        JEP 170, http://openjdk.java.net/jeps/170
                        support for new java.time stuff
                        enhanced metadata
                        clean-up
            7.17.16. Small VM (under 3 MB) for small devices (JEP 148, http://openjdk.java.net/jeps/148)
            7.17.17. Reduce Core-Library Memory Usage
                        JEP 149, http://openjdk.java.net/jeps/149
                        candidate: reduce object sizes by offloading reflection, annotation metadata to separate helper classes
                        candidate: disable reflection compiler
                        candidate: reduce size of internal tables, caches, buffers
            7.17.18. Optimize java.text.DecimalFormat.format() for performance, fix uncommon bugs
            7.17.19. Update Unicode support to 6.2, support new Turkish currency sign
